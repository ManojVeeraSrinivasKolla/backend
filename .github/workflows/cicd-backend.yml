# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, and run tests across different versions of Node.js
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: movie_review_backend
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Determine Cache Directory
        id: npm-cache-dir
        run: echo "dir=node_modules" >> $GITHUB_ENV

      - name: Cache Node Modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.dir }} # Correctly referencing the directory to cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        env:
          dir: node_modules

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build code
        run: npm run build --if-present

      - name: Set environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> $GITHUB_ENV
          echo "CLOUDINARY_SECRET_KEY=${{ secrets.CLOUDINARY_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/movie_review:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/movie_review:latest

  deploy:
    needs: build
    runs-on: self-hosted
    environment: movie_review_backend
    steps:
      - name: pull image from the docker hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/movie_review:latest

      - name: Run pulled image
        run: docker run -d -p 8000:8000 -e PORT=${{ secrets.PORT }} -e MONGO_URI=${{ secrets.MONGO_URI }} -e CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} -e JWT_SECRET=${{ secrets.JWT_SECRET }} -e CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }} -e CLOUDINARY_SECRET_KEY=${{ secrets.CLOUDINARY_SECRET_KEY }} ${{ secrets.DOCKER_USERNAME }}/movie_review:latest
        